// Package docs Code generated by swaggo/swag at 2025-07-04 15:19:03.4101499 +0700 +07 m=+1.641611401. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Revokes current access token and all associated refresh tokens. Requires valid JWT in Authorization header.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "schema": {
                            "$ref": "#/definitions/github_com_redeflesq_auth-example_internal_model.SuccessResponse"
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns the user ID from valid JWT token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Get current user ID",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_redeflesq_auth-example_internal_model.UserIdResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generates new access and refresh tokens pair using valid refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh authentication tokens",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_redeflesq_auth-example_internal_model.TokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New tokens pair",
                        "schema": {
                            "$ref": "#/definitions/github_com_redeflesq_auth-example_internal_model.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/github_com_redeflesq_auth-example_internal_model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid, expired or revoked tokens",
                        "schema": {
                            "$ref": "#/definitions/github_com_redeflesq_auth-example_internal_model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_redeflesq_auth-example_internal_model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/token": {
            "post": {
                "description": "Creates new access and refresh tokens pair for specified user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Generate new authentication tokens",
                "parameters": [
                    {
                        "description": "User ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_redeflesq_auth-example_internal_model.UserIdRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully generated tokens",
                        "schema": {
                            "$ref": "#/definitions/github_com_redeflesq_auth-example_internal_model.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or empty user ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_redeflesq_auth-example_internal_model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to generate or save tokens",
                        "schema": {
                            "$ref": "#/definitions/github_com_redeflesq_auth-example_internal_model.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_redeflesq_auth-example_internal_model.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "github_com_redeflesq_auth-example_internal_model.SuccessResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "string"
                }
            }
        },
        "github_com_redeflesq_auth-example_internal_model.TokenRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "description": "It's not hash",
                    "type": "string"
                }
            }
        },
        "github_com_redeflesq_auth-example_internal_model.TokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "github_com_redeflesq_auth-example_internal_model.UserIdRequest": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string"
                }
            }
        },
        "github_com_redeflesq_auth-example_internal_model.UserIdResponse": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token. Example: \"Bearer eyJhbGciOi...\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Auth Example API",
	Description:      "API for auth with JWT",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
